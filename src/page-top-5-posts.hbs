{{!< default}}

{{#post}}
	<article id="page-{{id}}" class="{{post_class}}" role="article">
		<div class="page-content">
			<h1 class="page-title">{{title}}</h2>
			{{content}}

			<button id="authorize-button" style="visibility: hidden">Authorize</button>
			<hr />
			<aside class="latest-posts">
				<h4>Top 5 posts - Our top posts right now</h4>
			</aside>
		</div>
	</article>
{{/post}}

<script type="text/javascript">
// https://github.com/google/google-api-javascript-client/
// https://github.com/google/google-api-nodejs-client/
// https://developers.google.com/analytics/solutions/articles/hello-analytics-api#query_sessions
// https://developers.google.com/analytics/devguides/reporting/embed/v1/custom-components
// https://ga-dev-tools.appspot.com/embed-api/custom-components/

var API_KEY = 'AIzaSyCuFXPmkn3OKbeQ9D6htI0ZLSa2gVREW-Y',
	CLIENT_ID = '620930885968-mmos0i02ulli7n4dbr04m0av89833eua.apps.googleusercontent.com',
	SCOPES = 'https://www.googleapis.com/auth/analytics.readonly';

function poorMansDebugging(string) {
	if (window.console) {
		console.log(string);
	}
}

function handleClientLoad() {
	gapi.client.setApiKey(API_KEY);
	window.setTimeout(function () {
		gapi.auth.authorize({client_id: CLIENT_ID, scope: SCOPES, immediate: true}, handleAuthResult);
	}, 1);
}

function handleAuthResult(authResult) {
	if (authResult) {
		gapi.client.load('analytics', 'v3', makeApiCall);
	} else {
		var authorizeButton = document.getElementById('authorize-button');

		authorizeButton.style.visibility = '';
		authorizeButton.onclick = function () {
			gapi.auth.authorize({client_id: CLIENT_ID, scope: SCOPES, immediate: false}, handleAuthResult);
			return false;
		};
		handleAuthClick;
	}
}

function makeApiCall() {
	gapi.client.analytics.management.accounts.list().execute(handleAccounts);
}

function handleAccounts(response) {
	if (!response.code) {
		if (response && response.items && response.items.length) {
			var firstAccountId = response.items[0].id;
			gapi.client.analytics.management.webproperties.list({'accountId': firstAccountId}).execute(handleWebproperties);
		} else {
			poorMansDebugging('No accounts found for this user.');
		}
	} else {
		poorMansDebugging('There was an error querying accounts: ' + response.message);
	}
}

function handleWebproperties(response) {
	if (!response.code) {
		if (response && response.items && response.items.length) {
			var firstAccountId = response.items[2].accountId;
			var firstWebpropertyId = response.items[2].id;
			gapi.client.analytics.management.profiles.list({'accountId': firstAccountId, 'webPropertyId': firstWebpropertyId}).execute(handleProfiles);
		} else {
			poorMansDebugging('No webproperties found for this user.');
		}
	} else {
		poorMansDebugging('There was an error querying webproperties: ' + response.message);
	}
}

function handleProfiles(response) {
	if (!response.code) {
		if (response && response.items && response.items.length) {
			var firstProfileId = response.items[0].id;
			gapi.client.analytics.data.ga.get({
				'ids': 'ga:' + firstProfileId,
				'start-date': lastNDays(14),
				'end-date': lastNDays(0),
				'metrics': 'ga:pageviews,ga:uniquePageviews',
				'dimensions': 'ga:pagePath,ga:pageTitle',
				'sort': '-ga:pageviews',
				'filters': 'ga:pagePath!=/',
				'max-results': 5
			}).execute(handleCoreReportingResults);
		} else {
			poorMansDebugging('No profiles found for this user.');
		}
	} else {
		poorMansDebugging('There was an error querying profiles: ' + response.message);
	}
}

function handleCoreReportingResults(response) {
	console.log(response);
	console.log(response.rows);

	if (!response.code) {
		if (response.rows && response.rows.length) {
			var list = ['<ol>'];

			for (var i = 0, row; row = response.rows[i]; ++i) {
				list.push('<li>');
					list.push('<a href="' + row[0] + '" alt="' + row[1] + '" data-pagewievs="' + row[2] + '" data-pagewievs-unique="' + row[3] + '">' + row[1] + '</a>');
				list.push('</li>');
			}
			list.push('</ol>');

			document.querySelector('.latest-posts').innerHTML += list.join('');
		} else {
			poorMansDebugging('No results found.');
		}
	} else {
		poorMansDebugging('There was an error querying core reporting API: ' + response.message);
	}
}

function lastNDays(n) {
	var today = new Date();
	var before = new Date();
	before.setDate(today.getDate() - n);

	var year = before.getFullYear();

	var month = before.getMonth() + 1;
	if (month < 10) {
		month = '0' + month;
	}

	var day = before.getDate();
	if (day < 10) {
		day = '0' + day;
	}

	return [year, month, day].join('-');
}
</script>
<script src="https://apis.google.com/js/client.js?onload=handleClientLoad" async></script>
